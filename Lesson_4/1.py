"""
1. Проанализировать скорость и сложность одного любого алгоритма,
разработанных в рамках домашнего задания первых трех уроков.
Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их.

3.	Сформировать из введенного числа обратное по порядку входящих в него
цифр и вывести на экран. Например, если введено число 3486,
 то надо вывести число 6843.
"""

import random
import timeit


def memorize(func):
    def g(n, memory={}):
        r = memory.get(n)
        if r is None:
            r = func(n)
            memory[n] = r
        return r

    return g


def func_rec(n, s=''):
    if n // 10 == 0:
        return str(n)
    else:
        return str(n % 10) + func_rec(n // 10, s)


@memorize
def func_rec_mem(n, s=''):
    if n // 10 == 0:
        return str(n)
    else:
        return str(n % 10) + func_rec(n // 10, s)


def func_while(n):
    s = ''
    while True:
        s += str(n % 10)
        n //= 10
        if n == 0:
            return s


def func_reversed(n):
    return ''.join(reversed(str(n)))


def func_collection(n):
    return str(n)[::-1]


rand = [int(random.random()*10**i) for i in range(5, 41, 5)]

for i in rand:
    print(f"Время вывода числа в обратном порядке № {i}")
    print(f"Рекурсия - "
          f"{round(timeit.timeit('func_rec(i)', setup='from __main__ import func_rec, i'), 4)} с.")
    print(f"Рекурсия c декоратором - "
          f"{round(timeit.timeit('func_rec_mem(i)', setup='from __main__ import func_rec_mem, i'), 4)} с.")
    print(f"Цикл - "
          f"{round(timeit.timeit('func_while(i)', setup='from __main__ import func_while, i'), 4)} с.")
    print(f"Реверс - "
          f"{round(timeit.timeit('func_reversed(i)', setup='from __main__ import func_reversed, i'), 4)} с.")
    print(f"Коллекции - "
          f"{round(timeit.timeit('func_collection(i)', setup='from __main__ import func_collection, i'), 4)} с.")


"""
Время вывода числа в обратном порядке № 13616
Рекурсия - 1.4977 с.
Рекурсия c декоратором - 0.1203 с.
Цикл - 1.1649 с.
Реверс - 0.6529 с.
Коллекции - 0.3207 с.
Время вывода числа в обратном порядке № 6902337887
Рекурсия - 3.4089 с.
Рекурсия c декоратором - 0.1258 с.
Цикл - 2.4069 с.
Реверс - 0.7509 с.
Коллекции - 0.3372 с.
Время вывода числа в обратном порядке № 717192253255335
Рекурсия - 5.4919 с.
Рекурсия c декоратором - 0.1295 с.
Цикл - 3.88 с.
Реверс - 0.9019 с.
Коллекции - 0.371 с.
Время вывода числа в обратном порядке № 62844573624136794112
Рекурсия - 7.534 с.
Рекурсия c декоратором - 0.1264 с.
Цикл - 5.2058 с.
Реверс - 0.9446 с.
Коллекции - 0.367 с.
Время вывода числа в обратном порядке № 7740218711541359757492224
Рекурсия - 9.5342 с.
Рекурсия c декоратором - 0.1286 с.
Цикл - 6.638 с.
Реверс - 1.0351 с.
Коллекции - 0.3813 с.
Время вывода числа в обратном порядке № 928759716916511667017673080832
Рекурсия - 11.6815 с.
Рекурсия c декоратором - 0.1347 с.
Цикл - 8.0731 с.
Реверс - 1.131 с.
Коллекции - 0.4077 с.
Время вывода числа в обратном порядке № 80012287102741747538706786846507008
Рекурсия - 13.8052 с.
Рекурсия c декоратором - 0.1282 с.
Цикл - 9.6967 с.
Реверс - 1.2128 с.
Коллекции - 0.4223 с.
Время вывода числа в обратном порядке № 1512444684210262272104096033421639286784
Рекурсия - 15.7703 с.
Рекурсия c декоратором - 0.1306 с.
Цикл - 11.0873 с.
Реверс - 1.319 с.
Коллекции - 0.436 с.
----------------------------------
Сложность:
Рекурсия - O(n)
Рекурсия c декоратором - O(1)
Цикл - O(n)
Реверс - O(n)
Коллекции - O(n)
----------------------------------
"""
