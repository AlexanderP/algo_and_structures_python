"""
2. Написать два алгоритма нахождения i-го по счёту простого числа.
Без использования «Решета Эратосфена»;
Используя алгоритм «Решето Эратосфена»
"""
import math
import timeit
import cProfile


def f3(n):
    # простой перебор
    N = n * 4
    lst = list(range(2, N))
    lst2 = []
    while True:
        for i in lst:
            check = True
            for j in lst:
                if i == j:
                    break
                elif i % j == 0:
                    check = False
                    break
            if check:
                lst2.append(i)
        if len(lst2) > n - 1:
            return lst2[n - 1]
        else:
            N += n
            lst = list(range(2, N))
            lst2 = []


def f1(n):
    # в какой-то мере подходит под алгоритм «Решето Эратосфена»
    i = 2
    j = 0
    N = n * 4
    lst = list(range(2, N))
    while True:
        if i in lst:
            #lst = list(filter(lambda x: x % i != 0, lst))
            lst = [j for j in lst if j % i != 0]
            j += 1
            if len(lst) == 0:
                N += n
                lst = list(range(2, N))
                i = 1
                j = 0
            if j == n:
                return i
        i += 1


def f2(n):
    # алгоритм «Решето Эратосфена»
    N = n * 4
    lst = list(range(N))
    lst[1] = 0
    m = 2
    while True:
        if lst[m] != 0:
            j = m ** 2
            while j < N:
                lst[j] = 0
                j += m
        m += 1
        if m >= math.sqrt(N):
            lst = [i for i in lst if i != 0]
            # lst = list(filter(lambda x: x != 0, lst))
            if len(lst) > n - 1:
                return lst[n - 1]
            else:
                m = 2
                N += n
                lst = list(range(N))
                lst[1] = 0


print("Время выполнения поиска простых чисел(1000 повторней):  ")
for i in range(1, 101, 9):
    print(f"Поиск простого числа № {i}")
    print(f"Время поиска без использования «Решета Эратосфена» - "
          f"{round(timeit.timeit('f3(i)', setup='from __main__ import f3, i', number=1000), 4)} с.")
    print(f"Время поиска c использованием  «Решета Эратосфена» - "
          f"{round(timeit.timeit('f2(i)', setup='from __main__ import f2, i', number=1000), 4)} с.")


# «Решето Эратосфена»
# cProfile.run("f2(50)")
"""
         35 function calls in 0.000 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 2.py:56(f2)
        2    0.000    0.000    0.000    0.000 2.py:70(<listcomp>)
        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}
        2    0.000    0.000    0.000    0.000 {built-in method builtins.len}
       27    0.000    0.000    0.000    0.000 {built-in method math.sqrt}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}

Функция проходила 2 раза проходила поиск простых чисел:
1. раз N = 200
2. раз N = 250
Искомое значение 229
Если задать новый множитель вместо 4, то можно ускорить поиск больших простых
чисел, но в тоже время замедлить поиск малых чисел.

"""

# Простой перебор
# cProfile.run("f3(50)")
"""
         105 function calls in 0.001 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.001    0.001    0.001    0.001 2.py:10(f3)
        1    0.000    0.000    0.001    0.001 <string>:1(<module>)
        1    0.000    0.000    0.001    0.001 {built-in method builtins.exec}
        2    0.000    0.000    0.000    0.000 {built-in method builtins.len}
       99    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}

Функция проходила 2 раза проходила поиск простых чисел:
1. раз N = 200
2. раз N = 250
Искомое значение 229
Если задать новый множитель вместо 4, то можно ускорить поиск больших простых
чисел, но в тоже время замедлить поиск малых чисел.
Так же происходит поиск целого делителя для каждого числа в диапазоне с 2 до n.

"""



"""
Время выполнения поиска простых чисел(1000 повторней):  
Поиск простого числа № 1
Время поиска без использования «Решета Эратосфена» - 0.0019 с.
Время поиска c использованием  «Решета Эратосфена» - 0.0033 с.
Поиск простого числа № 10
Время поиска без использования «Решета Эратосфена» - 0.0451 с.
Время поиска c использованием  «Решета Эратосфена» - 0.0074 с.
Поиск простого числа № 19
Время поиска без использования «Решета Эратосфена» - 0.1069 с.
Время поиска c использованием  «Решета Эратосфена» - 0.0133 с.
Поиск простого числа № 28
Время поиска без использования «Решета Эратосфена» - 0.2142 с.
Время поиска c использованием  «Решета Эратосфена» - 0.0185 с.
Поиск простого числа № 37
Время поиска без использования «Решета Эратосфена» - 0.8359 с.
Время поиска c использованием  «Решета Эратосфена» - 0.0527 с.
Поиск простого числа № 46
Время поиска без использования «Решета Эратосфена» - 1.2527 с.
Время поиска c использованием  «Решета Эратосфена» - 0.0648 с.
Поиск простого числа № 55
Время поиска без использования «Решета Эратосфена» - 1.6747 с.
Время поиска c использованием  «Решета Эратосфена» - 0.0796 с.
Поиск простого числа № 64
Время поиска без использования «Решета Эратосфена» - 2.2431 с.
Время поиска c использованием  «Решета Эратосфена» - 0.0919 с.
Поиск простого числа № 73
Время поиска без использования «Решета Эратосфена» - 5.2414 с.
Время поиска c использованием  «Решета Эратосфена» - 0.1811 с.
Поиск простого числа № 82
Время поиска без использования «Решета Эратосфена» - 6.557 с.
Время поиска c использованием  «Решета Эратосфена» - 0.2051 с.
Поиск простого числа № 91
Время поиска без использования «Решета Эратосфена» - 7.7549 с.
Время поиска c использованием  «Решета Эратосфена» - 0.2287 с.
Поиск простого числа № 100
Время поиска без использования «Решета Эратосфена» - 9.2811 с.
Время поиска c использованием  «Решета Эратосфена» - 0.2633 с.
"""
