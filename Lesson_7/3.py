"""
3. Массив размером 2m + 1, где m – натуральное число, заполнен случайным образом.
Найдите в массиве медиану. Медианой называется элемент ряда, делящий его на
две равные части: в одной находятся элементы, которые не меньше медианы,
в другой – не больше медианы. Задачу можно решить без сортировки исходного
массива. Но если это слишком сложно, то используйте метод сортировки,
 который не рассматривался на уроках
"""
import random
import timeit
from memory_profiler import profile

lst = [random.randint(-100, 100) for _ in range(1001)]

"""
lst = [-40, 4, -58, 80, -83, 95, -54, -49, -46, -35, -40, 86, 14, -53, 22, 7,
       30, 49, 71, 95, 94, -27, -46, 16, 37, 88, -30, 3, 9, -46, -66, 17, 39,
       71, -29, -17, -25, -61, -1, 13, -15, -75, -72, -59, 67, -65, 12, 72,
       -15, -93, 52, 71, -65, -35, -32, 66, -71, 3, 24, 90, 93, 10, 51, 94,
       -84, 20, 26, 70, -98, -48, 25, 83, -14, -72, 12, -60, 96, 66, -42, 19,
       -78, -13, 56, -9, -27, 91, 17, 14, -88, 41, 50, -36, -67, 72, 27, 3, 89,
       -78, 37, 57, 7, 23, 15, 78, 11, -15, -86, 83, 81, -5, 84, -26, -88, 76,
       -16, 63, 79, -37, -21, 94, -61, -59, 66, 64, -85, 7, -81, -38, 58, -48,
       -89, 24, 54, 39, 79, 68, 78, 18, 91, 100, 29, 44, -92, -1, 19, -84, -46,
       -75, -32, 24, -26, 16, -29, -93, 68, 70, 93, -61, 18, -66, 22, -35, -53,
       -43, 33, -71, -7, 35, 34, -64, -12, 59, 77, -4, -92, -11, -13, -67, 73,
       77, 75, -57, 88, -83, -35, -50, -90, -75, -16, -82, 53, -31, -37, 87, 67,
       40, 54, -30, -34, -5, -28, 30, 99, 45, 20, -36, -94, 100, 8, 98, 81, -87,
       -65, -76, 25, -52, -87, 44, -22, 3, 82, -63, 10, 74, -65, -23, -56, 60,
       -41, -26, 82, 95, -84, 43, -71, 62, 19, -22, 9, -94, -25, 33, 35, 13, 97,
       -97, -69, 84, 9, -29, 2, 83, 84, 22, -76, -37, -71, 69, -23, 44, 25, -33,
       -94, 98, -3, -17, 20, -54, -98, -99, 82, -56, -81, 89, -30, 29, -57, 20,
       -96, -44, 56, 35, 14, 25, 34, 28, -54, 4, 16, 50, 58, -90, -58, -69, 8,
       -57, 5, 0, -85, -53, -68, 81, -44, 33, 9, 49, -45, 99, 28, 36, -19, 70,
       -8, -29, -69, 1, -76, 94, 52, -12, 38, -9, -49, -95, 40, -37, 5, -18, 57,
       5, 80, 15, 23, -84, -34, 69, 19, -91, -46, -20, -25, -78, -54, -82, 23,
       -70, -74, 54, -49, 87, 85, -30, 74, 90, -33, -63, -66, 94, 0, -32, 31,
       24, -47, -93, 79, -7, -15, -10, 21, 7, 93, -13, -20, 31, 95, -73, -92,
       -14, 12, -62, -29, 24, 3, 7, 44, 82, -88, -33, -65, -58, -33, -22, -40,
       93, -49, -41, 31, 29, 67, 61, -85, 99, -97, -97, -53, -16, 95, 60, 54,
       -12, -83, -60, -68, -21, 3, 34, -42, -25, 94, 47, -98, 36, -39, 42, 31,
       62, -28, -15, 16, -2, 98, -81, -2, 84, -53, 52, 70, 70, 90, 5, -15, 78,
       -18, -72, 42, 10, -98, -74, -46, 38, -80, -90, -66, 64, -4, -15, 43, 18,
       -90, -66, -74, 96, -93, -3, -63, -52, 35, 71, 26, 27, 39, 47, -19, -80,
       89, -56, 97, 17, -6, 10, -74, -79, 83, -85, -71, 38, 24, -22, -36, -5, 7,
       -6, 3, -78, -24, -97, -13, -100, 91, -58, 91, 88, -84, -74, -90, -41,
       -11, 21, -99, -92, 80, -37, -45, 17, -98, -74, 53, 89, -19, -41, -26,
       -91, 31, 3, 20, -3, 38, 67, 23, -13, 36, -86, -43, -82, -42, 9, -87, 33,
       -52, 9, -93, 63, 0, 23, 18, 70, -14, -56, 14, 31, -75, -12, 18, -18, 99,
       -85, -16, 34, 14, 91, -48, -42, -8, -21, 96, -97, 65, 50, -8, -38, 46,
       66, -8, 67, -93, -45, 40, 75, -39, -37, -2, 79, -10, 86, 93, -39, -49,
       -50, -84, -56, -81, -96, 29, 80, 0, 89, 88, 43, -3, 8, -21, 86, 63, -71,
       -37, -87, 98, 43, 16, 10, -11, -90, -45, 65, 34, 81, 96, 55, 98, -76, 29,
       -3, -21, 46, 89, 27, -60, -40, 11, 99, -51, -55, 75, 2, 37, 92, -47, 92,
       -52, -97, -89, 70, 15, -100, -54, -1, 84, 30, 82, -5, -4, -83, -52, -16,
       -96, -93, 63, -65, -21, 71, 17, -13, -45, 76, 51, 38, -8, 93, -57, 18,
       75, 99, -99, 40, -31, 55, 97, -36, 54, 12, -54, -82, 11, 63, -80, -85,
       -73, 26, 79, 2, 71, -25, 97, -72, -37, 43, 34, -27, 92, -99, -15, -34,
       11, -57, 5, -95, -99, 72, -32, 78, 5, -89, -41, 27, -12, -43, 24, -49,
       17, 45, 66, -18, -35, -5, -12, 40, 99, 44, 48, -75, -46, 44, 6, -42, -68,
       -2, -96, 92, -9, 83, 56, 63, -66, 90, -86, 5, 99, -33, -69, 25, 92, 28,
       -3, 25, -99, -32, -71, -6, 45, 79, 30, 38, -64, -91, -4, -99, -73, 14, 3,
       75, -83, -61, 9, 32, 32, 2, -62, -78, 50, -47, 18, 73, 99, 28, 54, 73,
       12, -43, -83, 3, 26, -43, -59, 59, -36, 62, -93, 37, 52, 75, 37, -47, 65,
       67, -80, -86, -20, 42, 70, -88, 45, -58, -5, 83, -41, -95, 15, -93, -86,
       -63, 40, -99, 22, 72, 75, -65, -84, 3, 70, 77, 7, 38, -69, -99, -20, 31,
       45, -67, 5, 62, 42, -55, -2, -67, 99, 62, -15, -99, -17, -75, -92, 89,
       -2, -3, 32, -99, 79, 72, 98, 65, 9, 97, 2, 89, 69, 21, -10, 11, -5, -36,
       -21, 37, -4, 20, 1, -29, -80, 43, 16, 72, -49, -78, 83, -52, -53, 87,
       -47, -24, 66, 57, -36, -84, 87, 57, 35, -12, 8, -76, 64, -17, -39, 76,
       66, 87, -63, 23, 75, 83, -1, 88, -37, -21, -95, 75, -4, 87, 70, 4, -25,
       78, 97, 53, -55, -64, -44, 13, -51, 97, 62, 16, -99, -20, -52, -66, 92,
       -22, -70, 93, 2, 23, -48, -99, -27, 42, -48, 100, 53, 22, 13, 68, -36,
       -4, -64, 78, -14, 9, -94, -100, 66, 4, -65, 34, 95, 69, 96, 20, 76, 26,
       95, 99, -59, -85, -6, -21, 66, 11, -66, 80, -58, 91, -16, 43, -26, 97,
       20, 58, 49, -83, -25, -33, 44, -67, -28, 19, -82, -49, -25, -82, -94, 13,
       29]
"""


# @profile
def median_notsorted(lst):
    left_number = []
    right_number = []

    while len(lst) > 1:
        number_max = lst[0]
        number_min = lst[0]
        for _number in lst:
            if _number > number_max:
                number_max = _number
            elif _number < number_min:
                number_min = _number
        left_number.append(lst.pop(lst.index(number_min)))
        right_number.append(lst.pop(lst.index(number_max)))
    return f"{left_number} | {lst[0]} | {right_number[::-1]}"


# @profile
def median_default_sort(lst):
    length = len(lst) // 2
    lst.sort()
    return f"{lst[:length]} | {lst[length]} | {lst[length + 1:]}"


# @profile
def cocktail_sort(lst):
    left = 0
    rigt = len(lst) - 1
    while left <= rigt:
        for i in range(left, rigt):
            if lst[i] > lst[i + 1]:
                lst[i], lst[i + 1] = lst[i + 1], lst[i]
        rigt -= 1
        for i in range(rigt, left, -1):
            if lst[i] < lst[i - 1]:
                lst[i], lst[i - 1] = lst[i - 1], lst[i]
        left += 1
    return lst


# @profile
def median_cocktail_sort(lst):
    length = len(lst) // 2
    lst = cocktail_sort(lst)
    return f"{lst[:length]} | {lst[length]} | {lst[length + 1:]}"


print(median_default_sort(lst.copy()))
print(median_notsorted(lst.copy()))
print(median_cocktail_sort(lst.copy()))

# print(timeit.timeit("median_default_sort(lst.copy())",
#                     setup="from __main__ import median_default_sort, lst",
#                     number=100))
# print(timeit.timeit("median_notsorted(lst.copy())",
#                     setup="from __main__ import median_notsorted, lst",
#                     number=100))
# print(timeit.timeit("median_cocktail_sort(lst.copy())",
#                     setup="from __main__ import median_cocktail_sort, lst",
#                     number=100))

"""
Скорость алгоритма:
1.  С использованием стандартного метода python
    median_default_sort() - 0.013 секунды
2.  Без сортировки
    median_notsorted() -  1.380 секунды
3.  С использованием шейкерной сортировки
    median_cocktail_sort() - 6.792 секунды

Расходование памяти:
1.  С использованием стандартного метода python

    Line #    Mem usage    Increment   Line Contents
    ================================================
        96     16.4 MiB     16.4 MiB   @profile
        97                             def median_default_sort(lst):
        98     16.4 MiB      0.0 MiB       length = len(lst) // 2
        99     16.4 MiB      0.0 MiB       lst.sort()
       100     16.4 MiB      0.0 MiB       return f"{lst[:length]} | {lst[length]} | {lst[length + 1:]}"
    
    Использовано 16.4 мб памяти

2.  Без сортировки

        Line #    Mem usage    Increment   Line Contents
    ================================================
        79     16.2 MiB     16.2 MiB   @profile
        80                             def median_notsorted(lst):
        81     16.2 MiB      0.0 MiB       left_number = []
        82     16.2 MiB      0.0 MiB       right_number = []
        83                             
        84     16.2 MiB      0.0 MiB       while len(lst) > 1:
        85     16.2 MiB      0.0 MiB           number_max = lst[0]
        86     16.2 MiB      0.0 MiB           number_min = lst[0]
        87     16.2 MiB      0.0 MiB           for _number in lst:
        88     16.2 MiB      0.0 MiB               if _number > number_max:
        89     16.2 MiB      0.0 MiB                   number_max = _number
        90     16.2 MiB      0.0 MiB               elif _number < number_min:
        91     16.2 MiB      0.0 MiB                   number_min = _number
        92     16.2 MiB      0.0 MiB           left_number.append(lst.pop(lst.index(number_min)))
        93     16.2 MiB      0.0 MiB           right_number.append(lst.pop(lst.index(number_max)))
        94     16.2 MiB      0.0 MiB       return f"{left_number} | {lst[0]} | {right_number[::-1]}"
        
    Использовано 16.2 мб памяти
    
3.  С использованием шейкерной сортировки

    Filename: /home/alex/git-reps/algo_and_structures_python/Lesson_7/3.py
    
    Line #    Mem usage    Increment   Line Contents
    ================================================
       102     16.5 MiB     16.5 MiB   @profile
       103                             def cocktail_sort(lst):
       104     16.5 MiB      0.0 MiB       left = 0
       105     16.5 MiB      0.0 MiB       rigt = len(lst) - 1
       106     16.5 MiB      0.0 MiB       while left <= rigt:
       107     16.5 MiB      0.0 MiB           for i in range(left, rigt):
       108     16.5 MiB      0.0 MiB               if lst[i] > lst[i + 1]:
       109     16.5 MiB      0.0 MiB                   lst[i], lst[i + 1] = lst[i + 1], lst[i]
       110     16.5 MiB      0.0 MiB           rigt -= 1
       111     16.5 MiB      0.0 MiB           for i in range(rigt, left, -1):
       112     16.5 MiB      0.0 MiB               if lst[i] < lst[i - 1]:
       113     16.5 MiB      0.0 MiB                   lst[i], lst[i - 1] = lst[i - 1], lst[i]
       114     16.5 MiB      0.0 MiB           left += 1
       115     16.5 MiB      0.0 MiB       return lst
    
    
    Filename: /home/alex/git-reps/algo_and_structures_python/Lesson_7/3.py
    
    Line #    Mem usage    Increment   Line Contents
    ================================================
       117     16.5 MiB     16.5 MiB   @profile
       118                             def median_cocktail_sort(lst):
       119     16.5 MiB      0.0 MiB       length = len(lst) // 2
       120     16.5 MiB      0.0 MiB       lst = cocktail_sort(lst)
       121     16.5 MiB      0.0 MiB       return f"{lst[:length]} | {lst[length]} | {lst[length + 1:]}"

    Использовано 16.5 мб памяти
    
Вывод: 
1. По расходу памяти все реализации показали одинаковый результат(при n = 1001).
2. По времени(за исключение стандартных средств сортировки) лучший результат у
   алгоритма без использования сортировки по сравнению с шейкерной сортировкой.
"""